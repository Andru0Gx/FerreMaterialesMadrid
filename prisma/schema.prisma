// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  name          String
  email         String      @unique
  role          Role        @default(CUSTOMER)
  phone         String?
  isActive      Boolean     @default(true)
  isSubscribed  Boolean     @default(false)
  addresses     Address[]
  orders        Order[]

  @@map("users")
}

model Address {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  name      String
  address   String
  city      String
  state     String
  zip       String
  isDefault Boolean  @default(false) @map("is_default")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@map("addresses")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  products    Product[]

  @@map("categories")
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  products    Product[]

  @@map("brands")
}

model Supplier {
  id          String    @id @default(uuid())
  name        String
  products    Product[]

  @@map("suppliers")
}

model Product {
  id              String           @id @default(uuid())
  name            String
  categoryId      String?         @map("category_id")
  brandId         String?         @map("brand_id")
  supplierId      String?         @map("supplier_id")
  price           Float
  discount        Float           @default(0)
  inStock         Boolean        @default(true) @map("in_stock")
  shortDescription String?       @map("short_description")
  description     String
  slug            String?        @unique
  sku             String?        @unique
  category        Category?      @relation(fields: [categoryId], references: [id])
  brand           Brand?         @relation(fields: [brandId], references: [id])
  supplier        Supplier?      @relation(fields: [supplierId], references: [id])
  images          ProductImage[]
  orderItems      OrderItem[]

  @@map("products")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId String   @map("product_id")
  imageUrl  String   @map("image_url")
  isPrimary Boolean  @default(false) @map("is_primary")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Order {
  id              String      @id @default(uuid())
  userId          String?     @map("user_id")
  status          OrderStatus
  total           Float
  itemsCount      Int         @map("items_count")
  phone           String?
  email           String?
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  shippingAddressId String?   @map("shipping_address_id")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  user            User?       @relation(fields: [userId], references: [id])
  shippingAddress Address?    @relation(fields: [shippingAddressId], references: [id])
  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int            @id @default(autoincrement())
  orderId   String         @map("order_id")
  productId String         @map("product_id")
  variantId String?        @map("variant_id")
  quantity  Int
  price     Float
  discount  Float          @default(0)
  createdAt DateTime       @default(now()) @map("created_at")
  order     Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product        @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model Admin {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  role        AdminRole
  permissions Json
  phone       String?
  status      AdminStatus @default(ACTIVE)

  @@map("admins")
}

model Promotion {
  id                  String         @id @default(uuid())
  name                String
  description         String?
  discountType        DiscountType
  discountValue       Float
  startDate          DateTime       @map("start_date")
  endDate            DateTime       @map("end_date")
  applicableCategories Json?        @map("applicable_categories")
  applicableProducts  Json?        @map("applicable_products")
  minimumPurchase     Float         @map("minimum_purchase")
  couponCode         String?       @unique @map("coupon_code")
  active             Boolean       @default(true)

  @@map("promotions")
}

enum Role {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

enum AdminStatus {
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  SHIPPED
  DELIVERED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum DiscountType {
  PERCENTAGE
  FIXED
  BUY_X_GET_Y
  FREE_SHIPPING
}
