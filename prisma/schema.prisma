// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  name          String
  email         String      @unique
  password      String
  role          Role        @default(CUSTOMER)
  phone         String?
  isActive      Boolean     @default(true)
  isSubscribed  Boolean     @default(false)
  cart          Json?       // Almacena los datos del carrito como JSON
  addresses     Address[]
  orders        Order[]

  @@map("users")
}

model Address {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  name      String
  address   String
  city      String
  zip       String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@map("addresses")
}

model Product {
  id               Int      @id @default(autoincrement())
  name             String
  sku              String   @unique
  price            Float
  description      String
  shortDescription String @map("short_description")
  discount         Float
  stock            Int      @default(0)
  slug             String   @unique
  category         String
  specifications   Json
  images           ProductImage[]
  orderItems       OrderItem[]
  @@map("products")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  imageUrl  String  @map("image_url")
  product   Product @relation(fields: [productId], references: [id])
  productId Int @map("product_id")

  @@map("product_images")
}

model Order {
  id              String      @id @default(uuid())
  userId          String?     @map("user_id")
  status          OrderStatus
  total           Float
  itemsCount      Int         @map("items_count")
  phone           String?
  email           String?
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  shippingAddressId String?   @map("shipping_address_id")
  paymentReceipt  String?     @map("payment_receipt")
  discountCode    String?     @map("discount_code")
  discountAmount  Float?      @map("discount_amount")
  user            User?       @relation(fields: [userId], references: [id])
  shippingAddress Address?    @relation(fields: [shippingAddressId], references: [id])
  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int            @id @default(autoincrement())
  orderId   String         @map("order_id")
  productId Int            @map("product_id")
  quantity  Int
  price     Float
  discount  Float          @default(0)
  createdAt DateTime       @default(now()) @map("created_at")
  order     Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product        @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Admin {
  id          String      @id @default(uuid())
  name        String
  email       String      @unique
  password    String
  role        AdminRole
  status      AdminStatus @default(ACTIVE)
  phone       String?

  @@map("admins")
  @@index([email])
}

model Promotion {
  id                  String         @id @default(uuid())
  couponCode         String?       @unique @map("coupon_code")
  discountType        DiscountType
  discountValue       Float          @map("discount_value")
  startDate           DateTime?      @map("start_date")
  endDate             DateTime?      @map("end_date")
  maxUsage            Int?           @map("max_usage")
  active              Boolean        @default(true)

  @@map("promotions")
}

model BankAccount {
  id            String      @id @default(uuid())
  type          AccountType
  bank          String
  accountNumber String?     @map("account_number")
  phone         String?
  document      String      // c√©dula o RIF
  accountHolder String      @map("account_holder")

  @@map("bank_accounts")
}

enum Role {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

enum AdminStatus {
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  SHIPPED
  DELIVERED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum DiscountType {
  PORCENTAJE
  FIJO
  ENVIO_GRATIS
}

enum AccountType {
  PAGO_MOVIL
  TRANSFERENCIA
}
